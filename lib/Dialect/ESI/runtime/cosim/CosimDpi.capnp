##===- CosimDpi.capnp - ESI cosim RPC schema ------------------*- CAPNP -*-===//
##
## Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
## See https://llvm.org/LICENSE.txt for license information.
## SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
##
##===----------------------------------------------------------------------===//
##
## The ESI cosimulation RPC Cap'nProto schema. Documentation is in
## docs/ESI/cosim.md. TL;DR: Run the simulation, then connect to its RPC server
## with a client generated by the Cap'nProto implementation for your language of
## choice! (https://capnproto.org/otherlang.html)
##
##===----------------------------------------------------------------------===//

@0x9fd65fec6e2d2879;

# The primary interface exposed by an ESI cosim simulation.
interface CosimInterface @0xe3d7f70c7065c86a {
  # List all the registered endpoints.
  list @0 () -> (ifaces :List(EndpointDesc));

  # Open one of them. Specify both the send and recv data types if want type
  # safety and your language supports it.
  connectToSimInterface @1 (desc :EndpointDesc) -> (endpoint :ToSimInterface);
  connectFromSimInterface @2 (
    desc :EndpointDesc,
    callback :MessageReceiverInterface)
      -> (endpoint :FromSimInterface);

  # Get the zlib-compressed JSON system manifest.
  getCompressedManifest @3 () -> (version :Int32, compressedManifest :Data);

  # Create a low level interface into the simulation.
  openLowLevel @4 () -> (lowLevel :LowLevelInterface);
}

enum Direction {
  toSim @0;
  fromSim @1;
}

struct EndpointDesc {
  # ESI type ID.
  type @0 :Text;

  # Direction of Endpoint.
  direction @1 :Direction;

  # String-based endpoint identifier. Defined in the design.
  id @2 :Text;
}

interface MessageReceiverInterface @0xcee31f5bce3305bf {
  receiveMessage @0 (msg :Data);
}

interface ToSimInterface @0x9264cbc675502f71 extends() {
  disconnect @0 ();
  sendMessage @1 (msg :Data);
}

interface FromSimInterface @0xbfbb70ef7ae3b019 extends() {
  disconnect @0 ();
}

# A low level interface simply provides MMIO and host memory access. In all
# cases, hardware errors become exceptions.
interface LowLevelInterface @0xae716100ef82f6d6 {
  # Write to an MMIO register.
  writeMMIO @0 (address :UInt32, data :UInt32) -> ();
  # Read from an MMIO register.
  readMMIO  @1 (address :UInt32) -> (data :UInt32);
}
