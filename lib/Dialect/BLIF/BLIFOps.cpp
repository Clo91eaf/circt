//===- BLIFOps.cpp - Implement the BLIF operations ------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file implements BLIF ops.
//
//===----------------------------------------------------------------------===//

#include "circt/Dialect/BLIF/BLIFOps.h"
#include "mlir/IR/DialectImplementation.h"
#include "mlir/IR/ImplicitLocOpBuilder.h"

using namespace circt;
using namespace blif;

namespace mlir {
LogicalResult
convertFromAttribute(SmallVectorImpl<int8_t> &storage, Attribute attr,
                     function_ref<InFlightDiagnostic()> emitError) {
  auto valueAttr = dyn_cast<DenseI8ArrayAttr>(attr);
  if (!valueAttr) {
    emitError() << "expected dense array of int8_t for key `value`";
    return failure();
  }
  storage.resize_for_overwrite(valueAttr.size());
  llvm::copy(valueAttr.asArrayRef(), storage.begin());
  return success();
}

Attribute convertToAttribute(MLIRContext *ctx, ArrayRef<int8_t> storage) {
  return DenseI8ArrayAttr::get(ctx, storage);
}

} // namespace mlir

//===----------------------------------------------------------------------===//
// TableGen generated logic.
//===----------------------------------------------------------------------===//

// Provide the autogenerated implementation guts for the Op classes.
#define GET_OP_CLASSES
#include "circt/Dialect/BLIF/BLIF.cpp.inc"
